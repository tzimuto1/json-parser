High Level API
==============

json_tree = parser(<string>)

SUBSET OF JSON TO USE:
======================
- strings should be alphanumerals
- numbers should only be integers

GRAMMAR
=======
json := object | array

object = {} | { members }
members = pair | (pair , members)
pair = string : value

array = [] | [ elements ]
elements = value | value , elements
value = string | number | object | array | true | false | null

string
int (replace number with int)

json := object | array


SIMPLIFIED
object = {} | { pairs (, pair)* }
pair = string : value

array = [] | [ value (, value) ]
value = string | number | object | array | true | false | null

string = "(a|b|...)*"
int = (0|1|2...)+

ABSTRACT

API
===

value json_object.get(<string>)
value json_array.get(<index>)

json_array.iterator.get_next()

json.to_string()

- currently the created json tree should not be mutable. Only reads are possible

TYPES
=====
json:
    int   type;
    int   num;
    char *key;
    union value {
        json *members;
        json *elements;
        int   int_val; // true, false
        char *string_value;
    }


object:
    members->pair....

pair:
    string
    value

array:
    elements->value...

value = string | number | object | array | true | false | null

// seems like this is the base jype
value:
    type [string|number etc.]
    void *val


str
int
string
pair

json_object is made from pairs

CURRENTLY the json_object pairs are a linked list. Maybe do some hashing latter on

LOW LEVEL DETAILS
=================

- accessor function to peek or consume a character from the json_string


API METHODS
===========



CRUD

BASIC_API
=========
[DONE]json_create()
[DONE]json_destroy
json_stringify()
[DONE]json_is_empty()
[DONE]json_get_size()

JSON Object API
---------------
C

R
[DONE]json_object_has_key()
[DONE]json_object_has_number()
[DONE]json_object_has_boolean()
[DONE]json_object_has_string()

[DONE]json_object_get()
    - return the object. Return NULL if an error occurs
[DONE]json_object_get_all()
    - return the list of objects. Return NULL if an error occurs
    - pass pointer to contain the size of the c
[DONE]json_object_get_number()
    - pass pointer to hold the number and return the success or error status
[DONE]json_object_get_bool()
[DONE]json_object_get_string()
[DONE]Object iterator

U
[DONE]json_object_put_number()
[DONE]json_object_put_bool()
[DONE]json_object_put_string()
[DONE]json_object_remove_member()

D

JSON Array API
--------------
C

R
[DONE]json_array_has_number()
[DONE]json_array_has_boolean()
[DONE]json_array_has_string()

[DONE]json_array_get()
[DONE]json_array_get_number()
[DONE]json_array_get_bool()
[DONE]json_array_get_string()

[DONE]json_array_index_of_number()
[DONE]json_array_index_of_boolean()
[DONE]json_array_index_of_string()

U
[DONE]json_array_add_number()
[DONE]json_array_add_boolean()
[DONE]json_array_add_string()

[DONE]json_array_append_number()
[DONE]json_array_append_boolean();
[DONE]json_array_append_string();

[DONE]json_array_remove_at();
[DONE]json_array_remove_number();
[DONE]json_array_remove_boolean();
[DONE]json_array_remove_string();

D

json

json_iterator it = json_iter_init(object);
for (pair = json_iter_next(it); pair != json_iter_end(it); pair = json_iter_next(it))
{
    
}